/**
 * @packageDocumentation
 * @module api.functional.debug.pipeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * @controller DebugController.checkPipelineStatus
 * @path GET /debug/pipeline/:pipelineId
 * @accessor api.functional.debug.pipeline.checkPipelineStatus
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function checkPipelineStatus(
  connection: IConnection,
  pipelineId: string,
): Promise<checkPipelineStatus.Output> {
  return PlainFetcher.fetch(connection, {
    ...checkPipelineStatus.METADATA,
    template: checkPipelineStatus.METADATA.path,
    path: checkPipelineStatus.path(pipelineId),
  });
}
export namespace checkPipelineStatus {
  export type Output =
    | {
        error: string;
        pipeline?: undefined;
        ecs?: undefined;
        targetGroup?: undefined;
      }
    | {
        pipeline: {
          id: string;
          name: string;
          ecrImageUri?: null | undefined | string;
          deployOption?:
            | null
            | undefined
            | {
                port: number;
                command: string;
              };
        };
        ecs: any;
        targetGroup: any;
        error?: undefined;
      };

  export const METADATA = {
    method: "GET",
    path: "/debug/pipeline/:pipelineId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string) =>
    `/debug/pipeline/${encodeURIComponent(pipelineId?.toString() ?? "null")}`;
}
