/**
 * @packageDocumentation
 * @module api.functional.logs.executions.details
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { Recordstringany } from "../../../../structures/Recordstringany";

/**
 * @tag logs
 * @summary Get execution details by ID
 * @throws 400 Invalid execution ID
 * @throws 401 인증 실패
 * @throws 404 Execution not found
 * @controller LogsController.getExecutionById
 * @path GET /logs/executions/:executionId/details
 * @accessor api.functional.logs.executions.details.getExecutionById
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getExecutionById(
  connection: IConnection,
  executionId: string,
): Promise<getExecutionById.Output> {
  return PlainFetcher.fetch(connection, {
    ...getExecutionById.METADATA,
    template: getExecutionById.METADATA.path,
    path: getExecutionById.path(executionId),
  });
}
export namespace getExecutionById {
  export type Output = {
    executionId: string;
    pipelineId: string;
    projectId: string;
    executionType: string;
    status: string;
    awsBuildId?: undefined | string;
    awsDeploymentId?: undefined | string;
    logStreamName?: undefined | string;
    metadata?: undefined | Recordstringany;
    startedAt: string & Format<"date-time">;
    completedAt?: undefined | (string & Format<"date-time">);
    updatedAt: string & Format<"date-time">;
    isArchived: boolean;
    archiveUrl?: undefined | string;
    logCount: number;
  };

  export const METADATA = {
    method: "GET",
    path: "/logs/executions/:executionId/details",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (executionId: string) =>
    `/logs/executions/${encodeURIComponent(executionId?.toString() ?? "null")}/details`;
}
