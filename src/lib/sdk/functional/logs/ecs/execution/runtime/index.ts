/**
 * @packageDocumentation
 * @module api.functional.logs.ecs.execution.runtime
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * @tag logs
 * @summary Get ECS runtime logs for specific execution with service filtering
 * @throws 400 Invalid execution ID
 * @throws 401 인증 실패
 * @throws 404 Execution not found
 * @controller LogsController.getEcsRuntimeLogsByExecution
 * @path GET /logs/ecs/execution/:executionId/runtime
 * @accessor api.functional.logs.ecs.execution.runtime.getEcsRuntimeLogsByExecution
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEcsRuntimeLogsByExecution(
  connection: IConnection,
  executionId: string,
  query: getEcsRuntimeLogsByExecution.Query,
): Promise<getEcsRuntimeLogsByExecution.Output> {
  return PlainFetcher.fetch(connection, {
    ...getEcsRuntimeLogsByExecution.METADATA,
    template: getEcsRuntimeLogsByExecution.METADATA.path,
    path: getEcsRuntimeLogsByExecution.path(executionId, query),
  });
}
export namespace getEcsRuntimeLogsByExecution {
  export type Query = {
    limit?: undefined | number;
    containerName?: undefined | string;
    streamPrefix?: undefined | string;
    startTime?: undefined | string;
    endTime?: undefined | string;
  };
  export type Output = {
    logs: {
      timestamp: string;
      message: string;
      level: string;
      streamName: string;
      containerName?: undefined | string;
    }[];
    logGroupName: string;
    hasMore: boolean;
    totalStreams: number;
  };

  export const METADATA = {
    method: "GET",
    path: "/logs/ecs/execution/:executionId/runtime",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (executionId: string, query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/logs/ecs/execution/${encodeURIComponent(executionId?.toString() ?? "null")}/runtime`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
