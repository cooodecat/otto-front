/**
 * @packageDocumentation
 * @module api.functional.logs.ecs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

export * as execution from "./execution/index";

/**
 * @tag logs
 * @summary Get ECS deployment logs for a pipeline
 * @throws 400 Invalid pipeline ID
 * @throws 401 인증 실패
 * @throws 404 Pipeline not found
 * @controller LogsController.getEcsLogs
 * @path GET /logs/ecs/:pipelineId
 * @accessor api.functional.logs.ecs.getEcsLogs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEcsLogs(
  connection: IConnection,
  pipelineId: string,
  query: getEcsLogs.Query,
): Promise<getEcsLogs.Output> {
  return PlainFetcher.fetch(connection, {
    ...getEcsLogs.METADATA,
    template: getEcsLogs.METADATA.path,
    path: getEcsLogs.path(pipelineId, query),
  });
}
export namespace getEcsLogs {
  export type Query = {
    limit?: undefined | number;
    startTime?: undefined | string;
    endTime?: undefined | string;
  };
  export type Output = {
    logs: {
      timestamp: string;
      message: string;
      level: string;
      streamName: string;
    }[];
    logGroupName: string;
    hasMore: boolean;
  };

  export const METADATA = {
    method: "GET",
    path: "/logs/ecs/:pipelineId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string, query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/logs/ecs/${encodeURIComponent(pipelineId?.toString() ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
