/**
 * @packageDocumentation
 * @module api.functional.events.process
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { EventBridgeEvent } from "../../../structures/EventBridgeEvent";

/**
 * @controller EventBridgeController.processEvent
 * @path POST /events/process
 * @accessor api.functional.events.process.processEvent
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function processEvent(
  connection: IConnection,
  event: processEvent.Body,
): Promise<processEvent.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...processEvent.METADATA,
      template: processEvent.METADATA.path,
      path: processEvent.path(),
    },
    event,
  );
}
export namespace processEvent {
  export type Body = EventBridgeEvent;
  export type Output = {
    success: boolean;
    message: string;
  };

  export const METADATA = {
    method: "POST",
    path: "/events/process",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/events/process";
}
