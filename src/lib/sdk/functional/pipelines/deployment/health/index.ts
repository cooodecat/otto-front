/**
 * @packageDocumentation
 * @module api.functional.pipelines.deployment.health
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

/**
 * @tag pipeline
 * @summary 배포 헬스체크 조회
 * @throws 400 배포 URL이 설정되지 않음
 * @throws 401 인증 실패
 * @throws 404 파이프라인을 찾을 수 없음
 * @controller PipelineController.getDeploymentHealth
 * @path GET /pipelines/:pipelineId/deployment/health
 * @accessor api.functional.pipelines.deployment.health.getDeploymentHealth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getDeploymentHealth(
  connection: IConnection,
  pipelineId: string,
): Promise<getDeploymentHealth.Output> {
  return PlainFetcher.fetch(connection, {
    ...getDeploymentHealth.METADATA,
    template: getDeploymentHealth.METADATA.path,
    path: getDeploymentHealth.path(pipelineId),
  });
}
export namespace getDeploymentHealth {
  export type Output = {
    isHealthy: boolean;
    responseStatus: number;
    responseTime: number;
    errorMessage?: undefined | string;
    lastChecked: string & Format<"date-time">;
    deployUrl: string;
  };

  export const METADATA = {
    method: "GET",
    path: "/pipelines/:pipelineId/deployment/health",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}/deployment/health`;
}
